프론트 개발, 앱 개발, 언어 및 프레임 워크의 장단점
==============================================
프론트 개발
-----------
>Front - End 개발자란 사용자와 직접적인 상호작용을 하여, 사용자들이 직접적으로 보는 영역을 책임진다. front - end 개발자가 주로 쓰는 툴은 "HTML", "CSS", "CMS" 가 있다. 
■HTML
*HTML의 장점은 웹 문서의 표준(수정 및 관리의 용이, 웹 접근성 향상, 호환성 확보), 마크업 언어(빠른 문서 전달이 가능), 일반적인 텍스트 파일(간단한 메모장으로도 편집이 가능), 컴퓨터 시스템과 운영체제의 독립적(어떠한 시스템/브라우저에서 사용이 가능)등을 들 수 있다.
HTML의 단점은 웹 문서의 내용 표현에 집중(즉, 내용의 의미보단 외양적을 표현하는데 치중), 구조화된 정보의 표현과 검색의 어려움, 제한적인 태그, 문서의 유효성 검증과 제약조건 정의의 어려움 등이 있다.
HTML의 기본적인 틀은 다음과 같다.
<!DOCTYPE html>
<html>
<head>
  <title>제목</title>
  <meta charset="utf-8" />
</head>
<body>
  <h1>Hello</h1>
  <div>
    <p>Welcome to HTML world! 저와 함께 html을 배워봅시다.</p>
    <img src="웹페이지 주소" />
  </div>
</body>
</html>
■CSS
*CSS는 HTML의 요소(태그)에 서식을 적용하는 언어, 디자인 담당, 독립 사용이 불가능. HTML언어에 기생하는 언어이며, 골격(태그 + 데이터)과 서식을 분리, 서식 관련 기능 강화라는 특징을 가지고 있다. 즉, HTML이 골격이라고 하면, CSS은 그 위에 옷을 입혀주는 역할을 하게 된다.
기본 적인 틀은 
@charset "utf-8";
/* CSS Document */ 
body {
    margin: 0px; <!-- 언제나 전체 body에는 margin 값을 0으로 세팅해준다-->
    font-size: 18px;
    color: #FFF;
}
#box {
    position: relative;
    height: auto;
    margin: auto; <!-- 레이아웃을 싸고 있는 box의 margin을 auto로 주면 중앙정렬 효과-->
    background-color: #F90;
}
#top {
    background-color: #333;
    height: 100px;
    position: relative;
}
#left {
    background-color: #09C;
    float: left;
    height: 500px;
    width: 15%;
    position: relative;
}
#main {
    background-color: #3C0;
    float: left;
    height: 500px;
    width: 85%;
    position: relative;
}
#bottom {
    background-color: #C0F;
    height: 70px;
    position: relative;
    clear: both; <!-- 상단의 흐름을 한번 끊어주기 위해 clear를 해준다.. -.-;;?? -->
    float: left; <!-- 새로운 흐름을 지정해줘야 깨지지 않는다-->
}
이렇게 작성된 CSS를 HTML에서 불러들여서(link 태그 vs @import)를 이용해 같이 사용한다.

■CMS
*게시판, 레이아웃, 모듈과 같은 기능을 모아둔 웹 프레임워크이다. CMS를 사용하면 클릭 한번으로 사이트를 만들 수 있다.
게시판 관련 기능 같은 기본적인 작업을 자동화시키기 때문에 웹 사이트 제작에 드는 시간이 많이 감소된다. 그만큼 개발속도로 빨라진다. 기본적으로 파일/썸네일/캐시/등 프레임워크 단위의 도구가 있기 때문에 새로운 기능을 만들 때도 간단하게 구현이 가능하다.
언어 및 프레임 워크의 장단점
-------------------------------
1.	프레임 워크
프레임워크는 라이브러리와 달리 애플리케이션의 틀과 구조를 결정할 뿐만 아니라, 그 위에 개발된 개발자의 코드를 제어한다. 프레임워크는 구체적이며 확장 가능한 기반코드를 가지고 있으며, 설계자가 의도하는 여러 디자인 패턴의 집합으로 구성되어 있다.
장점
프레임워크의 장점으로는 구조화, 추상화, 재사용성 좀 더 구조적이고 안정적이면서 유지보수가 쉽고 확장성이 뛰어나게 하기 위해 생겨났다.  또한 개발 시간을 줄일 수 있으며, 오류로부터 자유롭다.
단점
단순히 하나의 출력을 위해서라도 많은 객체들이 호출되어 서로 관계를 맺어가며 동작하기 때문에 무겁다. 또한 프레임워크에 너무 의존하게 된다면 개발자의 능력이 떨어져서 프레임워크 없이 개발하는 것이 불가능해지는 점이 있다.
앱 개발
----------
대부분의 대중이 사용하는 안드로이드 기반 앱 개발에 대한 내용을 정리해 놓겠다.
기본적으로 안드로이드 앱을 만들기 위해선 JAVA, 안드로이드 개발툴(Eclipse, Android Studio)을 이용하여 만든다. 더불어, 현재 제공된 오픈 소스가 많기 때문에 이를 참고하여 개발하면 될 듯 하다. 밑의 3개는 메시지 어플에서 공개된 오픈 소스다. 
Telegram – 메시지 속도와 보안에 신경 씀
https://github.com/DrKLO/Telegram
signal android – 아직 진행중
https://github.com/signalapp/Signal-Android
Qksms – 메시지를 스케줄러에 넣어 원하는 날짜/시간에 알아서 전송해주는 기능
https://github.com/moezbhatti/qksms
